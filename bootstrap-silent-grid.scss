///* SILENT BOOTSTRAP GRID */
///***********************************************/

$grid-columns: 12;
$grid-gutter-width: 30px;

// media steps
$mediaSteps: (
        sm: 576,
        md: 768px, // 768px;
        lg: 992px, // 992px;
        xl: 1200px, // 1200px;
);

// container max width
$container-max-widths: (
        sm: 540px,
        md: 720px,
        lg: 960px,
        xl: 1140px
);

// mixin for media queries steps
// USE
// .class {
//    font-size: 10px;
//
//   @include res-less(md) {
//      font-size: 20px;
//    }
//
//    @include res(xl) {
//      font-size: 30px;
//    }
// }

@mixin res($media) {
  @each $breakpoint, $valueMedia in $mediaSteps {
    @if $media == $breakpoint {
      @media (min-width: $valueMedia) {
        @content;
      }
    }
  }
}

@mixin res-less($media) {
  @each $breakpoint, $valueMedia in $mediaSteps {
    @if $media == $breakpoint {
      $lessStep: $valueMedia - 1;
      @media (max-width: $lessStep) {
        @content;
      }
    }
  }
}


%flex {
  display: flex;
}

%container {
  width: 100%;
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
  margin-right: auto;
  margin-left: auto;

  @each $breakpoint, $valueMedia in $mediaSteps {
    @each $breakpointWidth, $valueWidth in $container-max-widths {
      @if $breakpoint == $breakpointWidth {
        @media (max-width: $valueMedia) {
          max-width: $valueWidth;
        }
      }
    }
  }
}

%row {
  display: flex;
  flex-wrap: wrap;
  margin-right: ($grid-gutter-width / -2);
  margin-left: ($grid-gutter-width / -2);
}

%col-ready {
  position: relative;
  width: 100%;
  min-height: 1px;
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
}

// by default
%no-gutters {
  margin-right: 0;
  margin-left: 0;
  & > * {
    padding-right: 0;
    padding-left: 0
  }
}

//* build silent classs for columns */
//***********************************************/
@each $breakpoint, $value in $mediaSteps {

  @if ($breakpoint == 'xs') {
    %col {
      flex-basis: 0;
      flex-grow: 1;
      max-width: 100%;
    }
    %col-auto {
      flex: 0 0 auto;
      width: auto;
      max-width: none;
    }
  } @else {
    %col-#{$breakpoint} {
      flex-basis: 0;
      flex-grow: 1;
      max-width: 100%;
    }
    %col-#{$breakpoint}-auto {
      flex: 0 0 auto;
      width: auto;
      max-width: none;
    }
  }

  %order-#{$breakpoint}-first {
    order: -1;
  }

  @for $i from 1 through $grid-columns {
    @if ($breakpoint == 'xs') {
      %col-#{$i} {
        flex: 0 0 percentage($i / $grid-columns);
        max-width: percentage($i / $grid-columns);
        @extend %col-ready;
      }
      %offset-#{$i} {
        $num: $i / $grid-columns;
        margin-left: if($num == 0, 0, percentage($num));
      }
      %order-#{$i} {
        order: $i;
      }
    } @else {
      %order-#{$breakpoint}-#{$i} {
        order: $i;
      }
      %col-#{$breakpoint}-#{$i} {
        @media (min-width: $value) {
          flex: 0 0 percentage($i / $grid-columns);
          max-width: percentage($i / $grid-columns);
        }
        @extend %col-ready;
      }
      %offset-#{$breakpoint}-#{$i} {
        @media (min-width: $value) {
          $num: $i / $grid-columns;
          margin-left: if($num == 0, 0, percentage($num));
        }
      }
    }
  }
}

/* build silent class for flex utilites */
/***********************************************/
$flexProps: (
        'flex' 'row' 'flex-direction' 'row',
        'flex' 'column' 'flex-direction' 'column',
        'flex' 'row-reverse' 'flex-direction' 'row-reverse',
        'flex' 'column-reverse' 'flex-direction' 'column-reverse',
        'flex' 'wrap' 'flex-wrap' 'wrap',
        'flex' 'nowrap' 'flex-wrap' 'nowrap',
        'flex' 'wrap-reverse' 'flex-wrap' 'wrap-reverse',
        'justify-content' 'start' 'justify-content' 'flex-start',
        'justify-content' 'end' 'justify-content' 'flex-end',
        'justify-content' 'center' 'justify-content' 'center',
        'justify-content' 'between' 'justify-content' 'space-between',
        'justify-content' 'around' 'justify-content' 'space-around',
        'align-items' 'start' 'align-items' 'flex-start',
        'align-items' 'end' 'align-items' 'flex-end',
        'align-items' 'center' 'align-items' 'center',
        'align-items' 'baseline' 'align-items' 'baseline',
        'align-items' 'stretch' 'align-items' 'stretch',
        'align-content' 'start' 'align-content' 'flex-start',
        'align-content' 'end' 'align-content' 'flex-end',
        'align-content' 'center' 'align-content' 'center',
        'align-content' 'between' 'align-content' 'space-between',
        'align-content' 'around' 'align-content' 'space-around',
        'align-content' 'stretch' 'align-content' 'stretch',
        'align-self' 'auto' 'align-self' 'auto',
        'align-self' 'start' 'align-self' 'flex-start',
        'align-self' 'end' 'align-self' 'flex-end',
        'align-self' 'center' 'align-self' 'center',
        'align-self' 'baseline' 'align-self' 'baseline',
        'align-self' 'stretch' 'align-self' 'stretch'
);

@each $breakpoint, $valueMedia in $mediaSteps {
  @if ($breakpoint == 'xs') {
    @each $props in $flexProps {
      $key1: nth($props, 1);
      $key2: nth($props, 2);
      $key3: nth($props, 3);
      $key4: nth($props, 4);
      %#{$key1}-#{$key2} {
        #{$key3}: #{$key4};
      }
    }
  } @else {
    @each $props in $flexProps {
      $key1: nth($props, 1);
      $key2: nth($props, 2);
      $key3: nth($props, 3);
      $key4: nth($props, 4);
      %#{$key1}-#{$breakpoint}-#{$key2} {
        @media (min-width: $valueMedia) {
          #{$key3}: #{$key4};
        }
      }
    }
  }
}