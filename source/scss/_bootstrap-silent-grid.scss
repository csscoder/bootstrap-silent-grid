///* SILENT BOOTSTRAP GRID */
///***********************************************/
$grid-columns: 12 !default;
$grid-gutter-width: 30px !default;

%flex {
  display: flex;
}

%flex-inline {
  display: inline-flex;
}

// media steps
$mediaSteps: (
  default: 'default',
  sm: 576px,
  md: 768px,
  lg: 992px,
  xl: 1200px,
  xxl: 1400px,
  xxx: 1900px
) !default;

// container max width
$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1340px,
  xxx: 1840px
) !default;

// mixin for media queries steps
// USE
// .class {
//    font-size: 10px;
//
//   @include res-less(md) {
//      font-size: 20px;
//    }
//
//    @include res(xl) {
//      font-size: 30px;
//    }
// }

@mixin res($media) {
  @each $breakpoint, $valueMedia in $mediaSteps {
    @if $media == $breakpoint {
      @media (min-width: $valueMedia) {
        @content;
      }
    }
  }
}

@mixin res-less($media) {
  @each $breakpoint, $valueMedia in $mediaSteps {
    @if $media == $breakpoint {
      $lessStep: $valueMedia - 1;
      @media (max-width: $lessStep) {
        @content;
      }
    }
  }
}

///* container */
///***********************************************/
%_containerCommon {
  width: 100%;
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
  margin-right: auto;
  margin-left: auto;
}

%container {
  @extend %_containerCommon;

  $lengthMediaStepsContainer: length($container-max-widths);

  @each $breakpoint, $valueMedia in $mediaSteps {
    @each $breakpointWidth, $valueWidth in $container-max-widths {
      @if $breakpoint == $breakpointWidth {
        @media (min-width: $valueMedia) {
          max-width: $valueWidth;
        }
      }
    }
  }

}

%container-fluid {
  @extend %_containerCommon;
}

///* build silent classs for columns */
///***********************************************/
%grid-column {
  position: relative;
  width: 100%;
  min-height: 1px;
  padding-right: ($grid-gutter-width / 2);
  padding-left: ($grid-gutter-width / 2);
}

%col {
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;
}

%col-auto {
  flex: 0 0 auto;
  width: auto;
  max-width: none;
}

@each $breakpoint, $value in $mediaSteps {

  @if ($breakpoint != 'default') {
    %col-#{$breakpoint} {
      @media (min-width: $value) {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
    }
    %col-#{$breakpoint}-auto {
      @media (min-width: $value) {
        flex: 0 0 auto;
        width: auto;
        max-width: none;
      }
    }
    %order-#{$breakpoint}-first {
      @media (min-width: $value) {
        order: -1;
      }
    }
    %order-#{$breakpoint}-last {
      @media (min-width: $value) {
        order: $grid-columns + 1;
      }
    }
    %order-#{$breakpoint}-0 {
      @media (min-width: $value) {
        order: 0;
      }
    }
    %offset-#{$breakpoint}-0 {
      @media (min-width: $value) {
        margin-left: 0;
      }
    }
    %flex-#{$breakpoint} {
      @media (min-width: $value) {
        display: flex;
      }
    }
    %flex-#{$breakpoint}-inline {
      @media (min-width: $value) {
        display: inline-flex;
      }
    }
  } @else {
    %order-first {
      order: -1;
    }
    %order-0 {
      order: 0;
    }
    %order-last {
      order: $grid-columns + 1;
    }
  }

  @for $i from 1 through $grid-columns {
    @if ($breakpoint == 'default') {
      %col-#{$i} {
        flex: 0 0 percentage($i / $grid-columns);
        max-width: percentage($i / $grid-columns);
        @extend %grid-column;
      }
      %offset-#{$i} {
        $num: $i / $grid-columns;
        margin-left: if($num == 0, 0, percentage($num));
      }
      %order-#{$i} {
        order: $i;
      }
    } @else {
      %order-#{$breakpoint}-#{$i} {
        @media (min-width: $value) {
          order: $i;
        }
      }
      %col-#{$breakpoint}-#{$i} {
        @media (min-width: $value) {
          flex: 0 0 percentage($i / $grid-columns);
          max-width: percentage($i / $grid-columns);
        }
        @extend %grid-column;
      }
      %offset-#{$breakpoint}-#{$i} {
        @media (min-width: $value) {
          $num: $i / $grid-columns;
          margin-left: if($num == 0, 0, percentage($num));
        }
      }
    }
  }
}

///* build silent class for flex utilites */
///***********************************************/
$flexProps: (
  'flex' 'row' 'flex-direction' 'row',
  'flex' 'column' 'flex-direction' 'column',
  'flex' 'row-reverse' 'flex-direction' 'row-reverse',
  'flex' 'column-reverse' 'flex-direction' 'column-reverse',
  'flex' 'wrap' 'flex-wrap' 'wrap',
  'flex' 'nowrap' 'flex-wrap' 'nowrap',
  'flex' 'wrap-reverse' 'flex-wrap' 'wrap-reverse',
  'justify-content' 'start' 'justify-content' 'flex-start',
  'justify-content' 'end' 'justify-content' 'flex-end',
  'justify-content' 'center' 'justify-content' 'center',
  'justify-content' 'between' 'justify-content' 'space-between',
  'justify-content' 'around' 'justify-content' 'space-around',
  'align-items' 'start' 'align-items' 'flex-start',
  'align-items' 'end' 'align-items' 'flex-end',
  'align-items' 'center' 'align-items' 'center',
  'align-items' 'baseline' 'align-items' 'baseline',
  'align-items' 'stretch' 'align-items' 'stretch',
  'align-content' 'start' 'align-content' 'flex-start',
  'align-content' 'end' 'align-content' 'flex-end',
  'align-content' 'center' 'align-content' 'center',
  'align-content' 'between' 'align-content' 'space-between',
  'align-content' 'around' 'align-content' 'space-around',
  'align-content' 'stretch' 'align-content' 'stretch',
  'align-self' 'auto' 'align-self' 'auto',
  'align-self' 'start' 'align-self' 'flex-start',
  'align-self' 'end' 'align-self' 'flex-end',
  'align-self' 'center' 'align-self' 'center',
  'align-self' 'baseline' 'align-self' 'baseline',
  'align-self' 'stretch' 'align-self' 'stretch'
);

@each $breakpoint, $valueMedia in $mediaSteps {
  @if ($breakpoint == 'default') {
    @each $props in $flexProps {
      $key1: nth($props, 1);
      $key2: nth($props, 2);
      $key3: nth($props, 3);
      $key4: nth($props, 4);
      %#{$key1}-#{$key2} {
        #{$key3}: #{$key4};
      }
    }
  } @else {
    @each $props in $flexProps {
      $key1: nth($props, 1);
      $key2: nth($props, 2);
      $key3: nth($props, 3);
      $key4: nth($props, 4);
      %#{$key1}-#{$breakpoint}-#{$key2} {
        @media (min-width: $valueMedia) {
          #{$key3}: #{$key4};
        }
      }
    }
  }
}

///* row column */
///***********************************************/
%row {
  @extend %flex, %flex-wrap;
  margin-right: ($grid-gutter-width / -2);
  margin-left: ($grid-gutter-width / -2);
}

// when we use in row containt
%no-gutters-row {
  & > * {
    padding-right: 0;
    padding-left: 0
  }
}

%no-gutters {
  margin-right: 0;
  margin-left: 0;
  & > * {
    padding-right: 0;
    padding-left: 0
  }
}
